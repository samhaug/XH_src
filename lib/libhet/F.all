
C$**********************************************************************
      SUBROUTINE ADJUSS(XL,OM,GRV,ELP,PART,DTH)
      DIMENSION PART(*)
      COMMON/AP3/ DELTA,FACTT,FACTO,PERT(24)
      COMMON/INTAP/ IDUM(14),NEQ,IFACT
      FU=0.
      IF(GRV.GT.0.) FU=6371./(GRV*(XL+0.5))
      DTH=FU*FACTT*OM*ELP
      OM=OM*(1.+ELP*FACTO)
      FU=FU*DELTA
      CALL FDOTPR(PART,1,PERT,1,DT,NEQ)
      IF(IFACT.EQ.0) GO TO 2
      NQ1=NEQ+1
      CALL FDOTPR(PART,1,PERT(NQ1),1,DOM,NEQ)
      OM=OM+DOM
      DTH=DTH+FU*(DOM-DT)
      RETURN
    2 OM=OM+DT
      RETURN
      END

C$**********************************************************************
      SUBROUTINE ADJUST(XL,OM,GRV,ELP,PART,DTH,FU)
      DIMENSION PART(*)
      COMMON/AP3/ DELTA,FACTT,FACTO,PERT(24)
      COMMON/INTAP/ IDUM(14),NEQ,IFACT
      FU=0.
      IF(GRV.GT.0.) FU=6371./(GRV*(XL+0.5))
      DTH=FU*FACTT*OM*ELP
      OM=OM*(1.+ELP*FACTO)
      FU=FU*DELTA
      CALL FDOTPR(PART,1,PERT,1,DT,NEQ)
      IF(IFACT.EQ.0) GO TO 2
      NQ1=NEQ+1
      CALL FDOTPR(PART,1,PERT(NQ1),1,DOM,NEQ)
      OM=OM+DOM
      DTH=DTH+FU*(DOM-DT)
      RETURN
    2 OM=OM+DT
      RETURN
      END
      SUBROUTINE AHOUSN(N,C,EV,EVEC,Y,A,B,P,TA,TB,W,V,MDIM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C   SCM VERSION
      DIMENSION A(24),B(24),P(24),TA(24),TB(24),W(24),Y(24),V(24)
      DIMENSION C(300),EV(24),EVEC(24,24)
      EPS=1.D-14
      UMEPS=1.D0-EPS
      TOL=1.D-70
      JSKIP=0
      KSKIP=1
      NM1=N-1
      I=1
      IDM1=0
      P(1)=0.D0
      V(1)=0.D0
      W(1)=0.D0
      IF(N.LE.0) RETURN
      IF(N.GT.2) GO TO 4
      IF(N.EQ.2) GO TO 3
      EV(1)=C(1)
      EVEC(1,1)=1.D0
      RETURN
    3 A(1)=C(1)
      B(1)=-C(2)
      CKJ=C(3)
      IP1=2
      GO TO 215
    4 IP1=I+1
      NMI=N-I
      KJ=IDM1
      J=I
    5 JP1=J+1
      VJ=V(J)
      K=J
      LJ=N-J+1
      JD=KJ+1
      IF(KSKIP.EQ.1) GO TO 6
      PJ=P(J)
      WJ=W(J)
    6 KJ=KJ+1
      CKJ=C(KJ)
      IF(KSKIP.EQ.1) GO TO 7
      DC=-(PJ*W(K)+WJ*P(K))
      CKJ=DC+CKJ
      C(KJ)=CKJ
    7 IF(J.GT.I) GO TO 14
      IF(K.GT.J) GO TO 8
      A(I)=CKJ
      K=K+1
      GO TO 6
    8 Y(K)=0.D0
      V(K)=CKJ
      K=K+1
      IF(K.LE.N) GO TO 6
      JSKIP=0
      SUM=DOT(V(JP1),1,V(JP1),1,LJ-1)
      IF(SUM.LE.TOL) GO TO 10
      S=DSQRT(SUM)
      CSD=V(JP1)
      IF(CSD.LT.0.D0) S=-S
      V(JP1)=CSD+S
      C(JD+1)=V(JP1)
      H=SUM+CSD*S
      B(I)=-S
      GO TO 12
   10 B(I)=0.D0
      JSKIP=1
   12 IDM1=KJ
      IF(JSKIP.EQ.1.AND.KSKIP.EQ.1) GO TO 215
      J=JP1
      GO TO 5
   14 IF(JSKIP.EQ.0) GO TO 15
      K=K+1
      IF(K.LE.N) GO TO 6
      J=JP1
      IF(J.LE.N) GO TO 5
      GO TO 215
   15 Y(K)=Y(K)+CKJ*VJ
      K=K+1
      IF(K.LE.N) GO TO 6
      IF(J.EQ.N) GO TO 17
      Y(J)=Y(J)+DOT(C(JD+1),1,V(JP1),1,LJ-1)
      J=JP1
      GO TO 5
   17 SP=DOT(V(IP1),1,Y(IP1),1,NMI)/(H+H)
      DO 21 J=IP1,N
      W(J)=V(J)
   21 P(J)=(Y(J)-SP*V(J))/H
  215 KSKIP=JSKIP
      I=IP1
      IF(I.LE.NM1) GO TO 4
      A(N)=CKJ
      B(NM1)=-B(NM1)
      B(N)=0.D0
      U=DABS(A(1))+DABS(B(1))
      DO 22 I=2,N
      U=DMAX1(U,DABS(A(I))+DABS(B(I))+DABS(B(I-1)))
   22 CONTINUE
      BD=U
      RBD=1.D0/U
      DO 23 I=1,N
      W(I)=B(I)
      B(I)=(B(I)/U)**2
      A(I)=A(I)/U
      V(I)=0.D0
   23 EV(I)=-1.D0
      U=1.D0
      IK=1
      NDIM=KJ
 1000 K=IK
      EL=EV(K)
   24 ELAM=.5D0*(U+EL)
      DU=(4.D0*DABS(ELAM)+RBD)*EPS
      IF(DABS(U-EL).LE.DU) GO TO 42
      IAG=0
      Q=A(1)-ELAM
      IF(Q.GE.0.D0) IAG=IAG+1
      DO 38 I=2,N
      IF(Q.EQ.0.D0) X=DABS(W(I-1)/BD)/EPS
      IF(Q.NE.0.D0) X=B(I-1)/Q
      Q=A(I)-ELAM-X
      IF( Q.GE.0.D0) IAG=IAG+1
   38 CONTINUE
      IF(IAG.GE.K) GO TO 39
      U=ELAM
      GO TO 24
   39 IF(IAG.EQ.K) GO TO 41
      M=K+1
      DO 40 MM=M,IAG
   40 EV(MM)=ELAM
   41 EL=ELAM
      GO TO 24
   42 ELAM=BD*ELAM
      EV(K)=ELAM
      IF(IK.EQ.1) GO TO 44
      IF(ELAM.GE.EV(IK-1)) EV(IK)=UMEPS*EV(IK-1)
   44 I=IK
      II=1
      L=N-1
      DO 49 J=1,N
   49 Y(J)=1.D0
   50 DO 51 K=1,N
      P(K)=0.D0
      TB(K)=W(K)
   51 TA(K)=BD*A(K)-EV(I)
      J=1
      DO 57 JP1=2,N
      IF(DABS(TA(J)).LT.DABS(W(J))) GO TO 53
      IF(TA(J).EQ.0.D0) TA(J)=EPS
      F=W(J)/TA(J)
      GO TO 55
   53 F=TA(J)/W(J)
      TA(J)=W(J)
      T=TA(JP1)
      TA(JP1)=TB(J)
      TB(J)=T
      P(J)=TB(JP1)
      TB(JP1)=0.D0
      T=Y(J)
      Y(J)=Y(JP1)
      Y(JP1)=T
   55 TB(JP1)=TB(JP1)-F*P(J)
      TA(JP1)=TA(JP1)-F*TB(J)
      Y(JP1)=Y(JP1)-F*Y(J)
      J=JP1
   57 CONTINUE
      IF(TA(N).EQ.0.D0) TA(N)=EPS
      IF(TA(L).EQ.0.D0) TA(L)=EPS
      Y(N)=Y(N)/TA(N)
      Y(L)=(Y(L)-Y(N)*TB(L))/TA(L)
      DO 62 J=2,L
      K=N-J
      IF(TA(K).EQ.0.D0) TA(K)=EPS
   62 Y(K)=(Y(K)-Y(K+1)*TB(K)-Y(K+2)*P(K))/TA(K)
      AY=DABS(Y(1))
      DO 63 J=2,N
      AY=DMAX1(AY,DABS(Y(J)))
   63 CONTINUE
      DO 64 J=1,N
   64 Y(J)=Y(J)/AY
      II=II+1
      IF(II.LE.2) GO TO 50
      ID=NDIM-2
      L=N-2
      DO 68 J=1,L
      ID=ID-J-2
      M=N-J
      H=W(M-1)
      IF(H.EQ.0.D0) GO TO 68
      JP1=J+1
      T=DOT(C(ID+1),1,Y(M),1,JP1)/(H*C(ID+1))
      KJ=ID
      DO 67 K=M,N
      KJ=KJ+1
   67 Y(K)=Y(K)+T*C(KJ)
   68 CONTINUE
      XNORM=DSQRT(DOT(Y,1,Y,1,N))
      DO 70 J=1,N
   70 EVEC(IK,J)=Y(J)/XNORM
      IK=IK+1
      IF(IK.LE.N) GO TO 1000
      RETURN
      END
      subroutine apsour(itaper,ifpstr,iter,nodep,kpar)
      real kerbuf
      integer*4 ihtmdl(3)
      complex eptryg,resp,asrins,sroins,rspida
      common/intap/ jstat,itype,icomp,ifact,jter,neig,npoint
     1   ,jifdep,jnstr,jtrans,j1s,j1f,j2s,j2f,jnpar,jiftwo
      common/ap1/ t0,dt,ommax,delta,caz,saz,eptryg(4),f(6),f2pf3,
     1f2mf3,r0,dom,dtorg,durtn
      complex resp5
      common/iap6/ resp5(257,5)
      common/ap2/ bkern(8740)
      common/iap5/ skern(12850)
      common/bigspa/  kerbuf(8740),resp(257,5),fillb(6366)
      common/ap3/ delt1,factt,facto,ppert(24)
      common/tape/ b(536),comp(514),npar,nsol,pert(24),save(325),
     1fillt(112),nbatch
      common/dblem/ xmd(6),r0d
      common/dblec/ epla,eplon,dep,torg,durt
      dimension it1(2),it2(2),synt(5140),taperd(514)
      common/scan/ nsour,npath,nprec(3,50),nogood(50),ratioi,ratiom
     1  ,ihtmdl,ifanm,lmaxm,leny,nprmm,pertm(588),ifcc,mfil(4),mfilan(4)
      equivalence (b(1),id),(b(2),lcomp),(b(3),inst),(b(4),rate),
     1(b(7),iyear),(b(15),iday),(b(16),idelay),(b(17),nfirst),
     2(b(18),nend),(b(22),iflag),(kerbuf(1),synt(1)),(kerbuf(5141),
     3taperd(1))
      save itaperi
      data it1,it2,domida,domsro/135,205,183,257,0.0001917476
     1   ,0.0007669904/
c
      write(6,"('apsour 1 - ',2i4)") itaper,ifpstr
      itaperi=itaper
      jstat=-2
      call somain
      zzero=0.
      resp(1,1)=asrins(zzero,0)
      do n=1,5
        do i=1,257
          resp(i,n)=(0.,0.)
        enddo
      enddo
      do i=2,244
        om=float(i-1)*domida
        fact=-1./(om*om)
        resp(i,2)=cmplx(fact,0.)*sroins(om)
        resp(i,3)=cmplx(fact,0.)*asrins(om,1)
      enddo
      i2=it2(itaper)
      i1=it1(itaper)
      do i=2,i2
        om=float(i-1)*domsro
        fact=-1./(om*om)
        resp(i,4)=cmplx(fact,0.)*sroins(om)
        resp(i,5)=cmplx(fact,0.)*asrins(om,1)
      enddo
      do i=2,5
        do j=1,257
          resp5(j,i)=resp(j,i)
        enddo
      enddo
      write(6,"('apsour 2 - ',2i4)") itaper,ifpstr
      return
c
c
      entry apsynt(itaper,ifpstr,iter,nodep,kpar)
      write(6,"('apsynt 1 - ',4i4)")ifpstr,iter,nodep,kpar
      call rewfl(7)
      nsour=1
      fact=0.
      npar=kpar
      if(iter.lt.0) then
c       write(7) (xmd(i),i=1,6),epla,eplon,dep,torg,durt,fact
c       call rewfl(7)
c       call bffin(7,1,b,13,j,m)
        do i=1,6
          b(i)=xmd(i)
        enddo
        b(7)=epla
        b(8)=eplon
        b(9)=dep
        b(10)=torg
        b(11)=durt
        b(12)=fact
        call rewfl(7)
        call bffout(7,1,nsour,808,j)
        call bffout(7,1,b,12,j)
      endif
      ifact=1
      if(iter.eq.0) ifact=6
      if(iter.gt.0) ifact=9
      jter=iter
      call epcntr(epla,eplon)
      do i=1,6
        if(iter.eq.0) f(i)=0.
        if(iter.ne.0) f(i)=xmd(i)
      enddo
      f2pf3=f(2)+f(3)
      f2mf3=f(2)-f(3)
      r0=r0d
      jifdep=0
      if(nodep.eq.0) jifdep=1
      dtorg=torg
      durtn=durt
      jtrans=8
      do nnn=1,npath
        nrec=nprec(1,nnn)
        irf=nprec(2,nnn)
        do nn=1,nrec
          jrec=irf+nn-1
          call bffi(7,1,b,5604,j,m,jrec)
          if(iflag.lt.0) go to 700
          if(iflag.ne.0.and.iter.ge.0) go to 700
          icomp=lcomp
          jnpar=kpar
          jiftwo=0
          if(rate.gt.20.) jiftwo=1
          dt=rate
          call statn(id,name,inst,stlat,stlong,ilev)
          call angles(stlat,stlong,delta,azep,azst
     1         ,theta,phi,psi,az12)
          cz=cos(azst)
          sz=sin(azst)
          if(lcomp.eq.1) then
            caz=-1.
            saz=0.
          else if(lcomp.eq.2) then
            caz=cz
            saz=sz
          else if(lcomp.eq.3) then
            caz=sz
            saz=-cz
          else if(lcomp.eq.4) then
            caz=-1.
            saz=0.
          else if(lcomp.eq.5) then
            caz=0.
            saz=-1.
          else 
            stop 'apsour: invalid component'
          endif
          do i=1,4
            xm=float(i-1)*(3.1415926536-azep)
            eptryg(i)=cmplx(cos(xm),sin(xm))
          enddo
          if(rate.le.20.) then
            dom=domsro
            ommax=0.1396263
            if(itaperi.eq.2) ommax=0.1963495
            idelay=0
            j2s=nend+10
            if(inst.eq.3) stop 'wrong rate'
            if(inst.eq.2) jnstr=5
            if(inst.ne.2) jnstr=4
          else
            dom=domida
            ommax=0.0465421
            j2s=nend+min0(10,514-nend)
            if(inst.ne.3) then
              if(inst.eq.2) jnstr=3
              if(inst.ne.2) jnstr=2
            else
              resp(1,1)=(0.,0.)
              do i=2,257
                om=float(i-1)*domida
                call idaresp(resp(i,1),iday,iyear+1900,name,om,i)
              enddo
              do i=1,257
                resp5(i,1)=resp(i,1)
              enddo
              jnstr=1
            endif
          endif
          j1s=nfirst-min0(10,nfirst-1)
          j1f=nfirst
          j2f=nend
          npoint=j2s-j1s+1
          i1s=j1s
          t0=rate*float(idelay+i1s-1)
          cot2t=cos(2.*theta)
          s2t=0.5*(1.-cot2t)
          c2t=0.5*(1.+cot2t)
          factt=-3.*sin(delta)*cos(az12)*s2t
          facto=1.-3.*c2t
          delt1=delta
          do i=1,24
            ppert(i)=pert(i)
          enddo
          if(ifpstr.eq.0) call reinit(ppert,kpar)
          neig=4
          if(iter.gt.0) neig=6
          jstat=-1
          itype=1
          iu=3
          if(lcomp.ne.1) iu=4
          call rewfl(iu)
          kstat=0
          do while (kstat.eq.0)
            call bffin(iu,1,kerbuf,8740,j,m)
            do i=1,8740
              bkern(i)=kerbuf(i)
            enddo
            call somain
            kstat=jstat
          enddo
          if(lcomp.ne.1) then
            jstat=0
            itype=2
            neig=2
            if(iter.gt.0) neig=3
            kstat=0
            do while (kstat.eq.0)
              call bffin(4,1,kerbuf,8740,j,m)
              do i=1,8740
                bkern(i)=kerbuf(i)
              enddo
              call somain
              kstat=jstat
            enddo
          endif
          if(jnstr.le.3) then
            npoint=183
            jifdep=244
          else
            npoint=i1
            jifdep=i2
          endif
          call strnsf
          if(iter.ne.0) then
            do i=1,514
              if(iter.gt.0) comp(i)=bkern(i)
              if(iter.lt.0) comp(i)=skern(i)
            enddo
            if(iter.lt.0) go to 499
          endif
          do i=1,5140
            synt(i)=skern(i)
          enddo
  499     continue
          wate=1.
          if(inst.eq.3.and.ratioi.ne.0.) wate=ratioi**2
          if(inst.eq.3.and.ratioi.eq.0.) wate=.2e-1
  